AWSTemplateFormatVersion: 2010-09-09
Description: Scratch template for enabling security hub

Parameters:
  UniqueName:
    Default: cloudops
    Description: A unique prefix given to all of the AWS resources
    Type: String
  
Resources:
  CloudTeamHub:
    Type: "AWS::SecurityHub::Hub"
  
  InviteNewMemberRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Description: String
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
            - Action:
              - securityhub:BatchEnableStandards
              - securityhub:CreateMembers
              - securityhub:DeleteMembers
              - securityhub:Describe*
              - securityhub:Get*
              - securityhub:InviteMembers
              - securityhub:List*
              Effect: Allow
              Resource: !Sub "arn:aws:securityhub:*:${AWS::AccountId}:hub/default"
            - Action:
              - organizations:ListAccounts
              Effect: Allow
              Resource: "*"
          PolicyName: !Sub ${UniqueName}-InviteNewMembersLambdaPolicy-${AWS::Region}
      RoleName: !Sub ${UniqueName}-InviteNewMembersLambdaRole-${AWS::Region}
  
  InviteNewMemberAccount:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: ./../packages/deploy-function
      Description: Invites Member Account to Security Hub
      Environment:
        Variables:
          MASTER_ACCOUNT: !Ref AWS::AccountId
          TARGET_ROLE: !Sub ${UniqueName}-SecurityHubAcceptInviteRole
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt InviteNewMemberRole.Arn
      Runtime: python3.8
      Timeout: 300

Outputs:
  SecurityHubArn:
    Value: !Ref CloudTeamHub
